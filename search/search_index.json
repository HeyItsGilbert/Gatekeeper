{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Gatekeeper Helps implement feature flags in your PowerShell projects. Overview Easily create and use feature flags written in JSON. Offers the ability to easily create new FeatureFlag files and leaves it up to you on how to distribute them. Installation Install-Module Gatekeeper Why? I had a desire for an easy to use rule system that allowed me to specifically target devices. I love JSON schemas (I know I know, I have a problem) and I thought that with a tightly schematized rule and property system this could make an easy to build open tool. This was also a challenge for myself to leverage JSON, classes, and the ability to serialize custom objects. Goals Allow easy gate keeping of new features by offering a simple Test-FeatureFlag command to add to any conditional logic. Leverage JSON because it's a format that can be generated/distributed easily by various public/private tools. Use JSON schemas to ensure that different aspects of the system are easily enforced. And more importantly that tools guide users on how to fill these files out. Allow properties and property sets to be organic and not baked into this tool. This means that you can support any business logic that makes sense for you and your organization. Ensure flexibility by allowing context, properties, and feature flags to be defined outside of this tool, while still enforcing the schema. Err on the side of caution when possible during evaluations. [!IMPORTANT] The decision to allow context, properties, and flags to come from external sources was deliberate to allow you to plug this into any system/tool you want. Terminology Feature Flag: This is a name for feature you want to be able to flip on or off given a set of conditions. Context: A hash table that defines a devices context. Context can be defined by whatever tooling you're using. (i.e. ohai, script, etc.). Properties: These are units that define different business logic groupings. These could be things like the hostname, environment, etc. The properties file defines the type and possible validations for each property. PropertySet: This is a collection of properties. Rules: This is a list of conditions to check against. These evaluated top/down and the first Allow/Deny wins. Conditions: These are sets of properties to match with the given context. There are higher level groupings such as AnyOf , OneOf , and Not available to join these. The conditions are composed of a Property , an Operator , and a Value . Effect: The effect defines what should happen when a given rule matches. These include: Allow, Deny, Audit, and Warn . Examples Creating a PropertySet Create a set of properties we want to evaluate. { \"$schema\": \"https://raw.githubusercontent.com/HeyItsGilbert/Gatekeeper/main/Gatekeeper/Schemas/Properties.json\", \"Percentage\": { \"Type\": \"integer\", \"Validation\": { \"Minimum\": 0, \"Maximum\": 99 } }, \"Environment\": { \"Type\": \"string\", \"Enum\": [ \"Production\", \"Staging\", \"Dev\" ] }, \"IsCompliant\": { \"Type\": \"boolean\" } } This defines a percentage property that must be an integer between 0-99, an environment string thats limited to Production, Stage, or Dev, and a boolean named IsCompliant. Note that these don't see how these properties are calculated only their type and how to validate them. For our later examples I'll save this as properties.json Feature Flag Next we will create a feature flag. { \"$schema\": \"https://raw.githubusercontent.com/HeyItsGilbert/Gatekeeper/main/Gatekeeper/Schemas/FeatureFlag.json\", \"Name\": \"New Startup Sound\", \"Description\": \"Roll out new screaming goat start up sound.\", \"Version\": \"1.0.0\", \"Author\": \"Your Name aka who to e-mail when customers are upset\", \"Tags\": [ \"Goat\", \"Managed\" ], \"DefaultEffect\": \"Deny\", \"Rules\": [ { \"Name\": \"Audit staging\", \"Effect\": \"Audit\", \"Conditions\": { \"Property\": \"Environment\", \"Operator\": \"Equals\", \"Value\": \"Staging\" } }, { \"Name\": \"Warn Production\", \"Effect\": \"Warn\", \"Conditions\": { \"Property\": \"Environment\", \"Operator\": \"Equals\", \"Value\": \"Production\" } }, { \"Name\": \"Allow Staging and Complaint or 10%\", \"Effect\": \"Allow\", \"Conditions\": { \"AllOf\": [ { \"AnyOf\": [ { \"Property\": \"IsCompliant\", \"Operator\": \"Equals\", \"Value\": \"true\" }, { \"Property\": \"Percent\", \"Operator\": \"LessThan\", \"Value\": \"11\" } ] }, { \"Property\": \"Environment\", \"Operator\": \"Equals\", \"Value\": \"Staging\" } ] } } ] } We'll save this as NewStartUpSound.json . Note that how this feature is implemented isn't part of the file. That's because this is purely to define what should get this feature. We have a name and description to allow users/developers/etc. to understand what feature this is for. A version allows tracking of changes. An email allows teams to understand who to reach out for with questions or concerns. The real power is in the rules. Rules are evaluated top down and the first Allow or Deny wins. Audit and Warn won't stop evaluations, but will take their respective action. Defining the Context The last step in evaluating whether a flag passes/fails is to provide context for the device. Context can be composed however you wish as long as the final output is a hash table. To make it easy to start you can create an empty hash using your property set file. $propertySet = Get-PropertySet -FilePath 'myProperties.json' $context = Get-DefaultContext -Properties $propertySet That would make $context a hash table with 3 keys (each with an $null value) that matches the property set: Percentage , Environment , and IsComplaint . I'll define these manually but you can imagine this could be a call to another tool, etc. Or maybe this is just a file you store on disk. $context['Percentage'] = 30 $context['Environment'] = 'Production' $context['IsCompliant'] = $true [!NOTE] Another value add of this not being hard coded is that you can create a mock context object to see how it would apply. Or you could create a function to determine another devices context values and see how it would apply before ever rolling out the change. Evaluating the Feature Flag Now that the context, property set, and feature flag have been defined we can evaluate if the flag applies to the current device. Test-FeatureFlag -Feature 'NewStartUpSound' -Context $context -Properties $propertySet The feature flag will be loaded from disk and each rule will be evaluated. The first rule is: { \"Name\": \"Audit staging\", \"Effect\": \"Audit\", \"Conditions\": { \"Property\": \"Environment\", \"Operator\": \"Equals\", \"Value\": \"Staging\" } } Because the Environment property in the Context is Production this rule does not apply and is skipped. { \"Name\": \"Warn Production\", \"Effect\": \"Warn\", \"Conditions\": { \"Property\": \"Environment\", \"Operator\": \"Equals\", \"Value\": \"Production\" } } This rule would apply because the only condition checks if it's the Production environment. Because the Effect is Warn the command will write a warning to the screen and move to the next rule. { \"Name\": \"Allow Staging and Complaint or 10%\", \"Effect\": \"Allow\", \"Conditions\": { \"AllOf\": [ { \"AnyOf\": [ { \"Property\": \"IsCompliant\", \"Operator\": \"Equals\", \"Value\": \"true\" }, { \"Property\": \"Percent\", \"Operator\": \"LessThan\", \"Value\": \"11\" } ] }, { \"Property\": \"Environment\", \"Operator\": \"Equals\", \"Value\": \"Staging\" } ] } } The first (and only condition) is an AllOf which means the items in it must both evaluate to true. The first item in that group is an AnyOf which means that either of the values can be true. Because the device context has IsCompliant to true, then the first condition matches. Then we proceed back up to the second item in the AllOf condition. This one again matches on environment, but is false because the context has environment set to Production . Because one of the items in the AllOf condition failed, then the rule is skipped. Because there are no more rules, we apply the effect from the DefaultEffect property. [!IMPORTANT] The Test-FeatureFlag command will always default to $False if the default effect is not an approval. This protects against accidentally opening a feature when your default is warn or audit. To Do [ ] Function to create PropertySet [ ] Class for FeatureFlag [ ] Evaluate performance [ ] Handle fetching/caching feature flags [ ] Script level variables for defining where to get/set json files. [ ] Function to create property in PropertySet [ ] Ability to create PropertySet in memory and then ability to save to disk. [ ] Define auditing method that users can overwrite [ ] Publish schemas somewhere consistent with some type of versioning [ ] CRUD for creating condition [ ] TUI? [ ] Support for evaluating remote device","title":"Home"},{"location":"#gatekeeper","text":"Helps implement feature flags in your PowerShell projects.","title":"Gatekeeper"},{"location":"#overview","text":"Easily create and use feature flags written in JSON. Offers the ability to easily create new FeatureFlag files and leaves it up to you on how to distribute them.","title":"Overview"},{"location":"#installation","text":"Install-Module Gatekeeper","title":"Installation"},{"location":"#why","text":"I had a desire for an easy to use rule system that allowed me to specifically target devices. I love JSON schemas (I know I know, I have a problem) and I thought that with a tightly schematized rule and property system this could make an easy to build open tool. This was also a challenge for myself to leverage JSON, classes, and the ability to serialize custom objects.","title":"Why?"},{"location":"#goals","text":"Allow easy gate keeping of new features by offering a simple Test-FeatureFlag command to add to any conditional logic. Leverage JSON because it's a format that can be generated/distributed easily by various public/private tools. Use JSON schemas to ensure that different aspects of the system are easily enforced. And more importantly that tools guide users on how to fill these files out. Allow properties and property sets to be organic and not baked into this tool. This means that you can support any business logic that makes sense for you and your organization. Ensure flexibility by allowing context, properties, and feature flags to be defined outside of this tool, while still enforcing the schema. Err on the side of caution when possible during evaluations. [!IMPORTANT] The decision to allow context, properties, and flags to come from external sources was deliberate to allow you to plug this into any system/tool you want.","title":"Goals"},{"location":"#terminology","text":"Feature Flag: This is a name for feature you want to be able to flip on or off given a set of conditions. Context: A hash table that defines a devices context. Context can be defined by whatever tooling you're using. (i.e. ohai, script, etc.). Properties: These are units that define different business logic groupings. These could be things like the hostname, environment, etc. The properties file defines the type and possible validations for each property. PropertySet: This is a collection of properties. Rules: This is a list of conditions to check against. These evaluated top/down and the first Allow/Deny wins. Conditions: These are sets of properties to match with the given context. There are higher level groupings such as AnyOf , OneOf , and Not available to join these. The conditions are composed of a Property , an Operator , and a Value . Effect: The effect defines what should happen when a given rule matches. These include: Allow, Deny, Audit, and Warn .","title":"Terminology"},{"location":"#examples","text":"","title":"Examples"},{"location":"#creating-a-propertyset","text":"Create a set of properties we want to evaluate. { \"$schema\": \"https://raw.githubusercontent.com/HeyItsGilbert/Gatekeeper/main/Gatekeeper/Schemas/Properties.json\", \"Percentage\": { \"Type\": \"integer\", \"Validation\": { \"Minimum\": 0, \"Maximum\": 99 } }, \"Environment\": { \"Type\": \"string\", \"Enum\": [ \"Production\", \"Staging\", \"Dev\" ] }, \"IsCompliant\": { \"Type\": \"boolean\" } } This defines a percentage property that must be an integer between 0-99, an environment string thats limited to Production, Stage, or Dev, and a boolean named IsCompliant. Note that these don't see how these properties are calculated only their type and how to validate them. For our later examples I'll save this as properties.json","title":"Creating a PropertySet"},{"location":"#feature-flag","text":"Next we will create a feature flag. { \"$schema\": \"https://raw.githubusercontent.com/HeyItsGilbert/Gatekeeper/main/Gatekeeper/Schemas/FeatureFlag.json\", \"Name\": \"New Startup Sound\", \"Description\": \"Roll out new screaming goat start up sound.\", \"Version\": \"1.0.0\", \"Author\": \"Your Name aka who to e-mail when customers are upset\", \"Tags\": [ \"Goat\", \"Managed\" ], \"DefaultEffect\": \"Deny\", \"Rules\": [ { \"Name\": \"Audit staging\", \"Effect\": \"Audit\", \"Conditions\": { \"Property\": \"Environment\", \"Operator\": \"Equals\", \"Value\": \"Staging\" } }, { \"Name\": \"Warn Production\", \"Effect\": \"Warn\", \"Conditions\": { \"Property\": \"Environment\", \"Operator\": \"Equals\", \"Value\": \"Production\" } }, { \"Name\": \"Allow Staging and Complaint or 10%\", \"Effect\": \"Allow\", \"Conditions\": { \"AllOf\": [ { \"AnyOf\": [ { \"Property\": \"IsCompliant\", \"Operator\": \"Equals\", \"Value\": \"true\" }, { \"Property\": \"Percent\", \"Operator\": \"LessThan\", \"Value\": \"11\" } ] }, { \"Property\": \"Environment\", \"Operator\": \"Equals\", \"Value\": \"Staging\" } ] } } ] } We'll save this as NewStartUpSound.json . Note that how this feature is implemented isn't part of the file. That's because this is purely to define what should get this feature. We have a name and description to allow users/developers/etc. to understand what feature this is for. A version allows tracking of changes. An email allows teams to understand who to reach out for with questions or concerns. The real power is in the rules. Rules are evaluated top down and the first Allow or Deny wins. Audit and Warn won't stop evaluations, but will take their respective action.","title":"Feature Flag"},{"location":"#defining-the-context","text":"The last step in evaluating whether a flag passes/fails is to provide context for the device. Context can be composed however you wish as long as the final output is a hash table. To make it easy to start you can create an empty hash using your property set file. $propertySet = Get-PropertySet -FilePath 'myProperties.json' $context = Get-DefaultContext -Properties $propertySet That would make $context a hash table with 3 keys (each with an $null value) that matches the property set: Percentage , Environment , and IsComplaint . I'll define these manually but you can imagine this could be a call to another tool, etc. Or maybe this is just a file you store on disk. $context['Percentage'] = 30 $context['Environment'] = 'Production' $context['IsCompliant'] = $true [!NOTE] Another value add of this not being hard coded is that you can create a mock context object to see how it would apply. Or you could create a function to determine another devices context values and see how it would apply before ever rolling out the change.","title":"Defining the Context"},{"location":"#evaluating-the-feature-flag","text":"Now that the context, property set, and feature flag have been defined we can evaluate if the flag applies to the current device. Test-FeatureFlag -Feature 'NewStartUpSound' -Context $context -Properties $propertySet The feature flag will be loaded from disk and each rule will be evaluated. The first rule is: { \"Name\": \"Audit staging\", \"Effect\": \"Audit\", \"Conditions\": { \"Property\": \"Environment\", \"Operator\": \"Equals\", \"Value\": \"Staging\" } } Because the Environment property in the Context is Production this rule does not apply and is skipped. { \"Name\": \"Warn Production\", \"Effect\": \"Warn\", \"Conditions\": { \"Property\": \"Environment\", \"Operator\": \"Equals\", \"Value\": \"Production\" } } This rule would apply because the only condition checks if it's the Production environment. Because the Effect is Warn the command will write a warning to the screen and move to the next rule. { \"Name\": \"Allow Staging and Complaint or 10%\", \"Effect\": \"Allow\", \"Conditions\": { \"AllOf\": [ { \"AnyOf\": [ { \"Property\": \"IsCompliant\", \"Operator\": \"Equals\", \"Value\": \"true\" }, { \"Property\": \"Percent\", \"Operator\": \"LessThan\", \"Value\": \"11\" } ] }, { \"Property\": \"Environment\", \"Operator\": \"Equals\", \"Value\": \"Staging\" } ] } } The first (and only condition) is an AllOf which means the items in it must both evaluate to true. The first item in that group is an AnyOf which means that either of the values can be true. Because the device context has IsCompliant to true, then the first condition matches. Then we proceed back up to the second item in the AllOf condition. This one again matches on environment, but is false because the context has environment set to Production . Because one of the items in the AllOf condition failed, then the rule is skipped. Because there are no more rules, we apply the effect from the DefaultEffect property. [!IMPORTANT] The Test-FeatureFlag command will always default to $False if the default effect is not an approval. This protects against accidentally opening a feature when your default is warn or audit.","title":"Evaluating the Feature Flag"},{"location":"#to-do","text":"[ ] Function to create PropertySet [ ] Class for FeatureFlag [ ] Evaluate performance [ ] Handle fetching/caching feature flags [ ] Script level variables for defining where to get/set json files. [ ] Function to create property in PropertySet [ ] Ability to create PropertySet in memory and then ability to save to disk. [ ] Define auditing method that users can overwrite [ ] Publish schemas somewhere consistent with some type of versioning [ ] CRUD for creating condition [ ] TUI? [ ] Support for evaluating remote device","title":"To Do"},{"location":"en-US/Export-GatekeeperConfig/","text":"Export-GatekeeperConfig SYNOPSIS {{ Fill in the Synopsis }} SYNTAX Export-GatekeeperConfig [[-ConfigurationScope] <Object>] [[-Configuration] <Hashtable>] [-ProgressAction <ActionPreference>] [<CommonParameters>] DESCRIPTION {{ Fill in the Description }} EXAMPLES Example 1 PS C:\\> {{ Add example code here }} {{ Add example description here }} PARAMETERS -ConfigurationScope {{ Fill ConfigurationScope Description }} Type: Object Parameter Sets: (All) Aliases: Required: False Position: 1 Default value: None Accept pipeline input: False Accept wildcard characters: False -Configuration Use this override the default configuration with a custom hashtable. It is recommended to get the configuration using the Import-GatekeeperConfig cmdlet before using this parameter to ensure you don't lose any existing settings. Type: Hashtable Parameter Sets: (All) Aliases: Required: False Position: 2 Default value: None Accept pipeline input: False Accept wildcard characters: False -ProgressAction {{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS None OUTPUTS System.Object NOTES RELATED LINKS","title":"Export-GatekeeperConfig"},{"location":"en-US/Export-GatekeeperConfig/#export-gatekeeperconfig","text":"","title":"Export-GatekeeperConfig"},{"location":"en-US/Export-GatekeeperConfig/#synopsis","text":"{{ Fill in the Synopsis }}","title":"SYNOPSIS"},{"location":"en-US/Export-GatekeeperConfig/#syntax","text":"Export-GatekeeperConfig [[-ConfigurationScope] <Object>] [[-Configuration] <Hashtable>] [-ProgressAction <ActionPreference>] [<CommonParameters>]","title":"SYNTAX"},{"location":"en-US/Export-GatekeeperConfig/#description","text":"{{ Fill in the Description }}","title":"DESCRIPTION"},{"location":"en-US/Export-GatekeeperConfig/#examples","text":"","title":"EXAMPLES"},{"location":"en-US/Export-GatekeeperConfig/#example-1","text":"PS C:\\> {{ Add example code here }} {{ Add example description here }}","title":"Example 1"},{"location":"en-US/Export-GatekeeperConfig/#parameters","text":"","title":"PARAMETERS"},{"location":"en-US/Export-GatekeeperConfig/#-configurationscope","text":"{{ Fill ConfigurationScope Description }} Type: Object Parameter Sets: (All) Aliases: Required: False Position: 1 Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-ConfigurationScope"},{"location":"en-US/Export-GatekeeperConfig/#-configuration","text":"Use this override the default configuration with a custom hashtable. It is recommended to get the configuration using the Import-GatekeeperConfig cmdlet before using this parameter to ensure you don't lose any existing settings. Type: Hashtable Parameter Sets: (All) Aliases: Required: False Position: 2 Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-Configuration"},{"location":"en-US/Export-GatekeeperConfig/#-progressaction","text":"{{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-ProgressAction"},{"location":"en-US/Export-GatekeeperConfig/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"en-US/Export-GatekeeperConfig/#inputs","text":"","title":"INPUTS"},{"location":"en-US/Export-GatekeeperConfig/#none","text":"","title":"None"},{"location":"en-US/Export-GatekeeperConfig/#outputs","text":"","title":"OUTPUTS"},{"location":"en-US/Export-GatekeeperConfig/#systemobject","text":"","title":"System.Object"},{"location":"en-US/Export-GatekeeperConfig/#notes","text":"","title":"NOTES"},{"location":"en-US/Export-GatekeeperConfig/#related-links","text":"","title":"RELATED LINKS"},{"location":"en-US/Get-DefaultContext/","text":"Get-DefaultContext SYNOPSIS Get a hashtable of all the properties. SYNTAX Get-DefaultContext [-PropertySet] <PropertySet> [-ProgressAction <ActionPreference>] [<CommonParameters>] DESCRIPTION Return a hash table of all the keys for the properties with null values. EXAMPLES EXAMPLE 1 $context = Get-DefaultContext -Properties .\\props.json $context.Hostname = $(hostname) Get all the property keys and then set the hostname using the hostname command. PARAMETERS -PropertySet The PropertySet or file path to your properties. Type: PropertySet Parameter Sets: (All) Aliases: Required: True Position: 1 Default value: None Accept pipeline input: False Accept wildcard characters: False -ProgressAction {{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.Collections.Hashtable NOTES If you don't pass in Properties explicitly you will be prompted to for a properties file. RELATED LINKS","title":"Get-DefaultContext"},{"location":"en-US/Get-DefaultContext/#get-defaultcontext","text":"","title":"Get-DefaultContext"},{"location":"en-US/Get-DefaultContext/#synopsis","text":"Get a hashtable of all the properties.","title":"SYNOPSIS"},{"location":"en-US/Get-DefaultContext/#syntax","text":"Get-DefaultContext [-PropertySet] <PropertySet> [-ProgressAction <ActionPreference>] [<CommonParameters>]","title":"SYNTAX"},{"location":"en-US/Get-DefaultContext/#description","text":"Return a hash table of all the keys for the properties with null values.","title":"DESCRIPTION"},{"location":"en-US/Get-DefaultContext/#examples","text":"","title":"EXAMPLES"},{"location":"en-US/Get-DefaultContext/#example-1","text":"$context = Get-DefaultContext -Properties .\\props.json $context.Hostname = $(hostname) Get all the property keys and then set the hostname using the hostname command.","title":"EXAMPLE 1"},{"location":"en-US/Get-DefaultContext/#parameters","text":"","title":"PARAMETERS"},{"location":"en-US/Get-DefaultContext/#-propertyset","text":"The PropertySet or file path to your properties. Type: PropertySet Parameter Sets: (All) Aliases: Required: True Position: 1 Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-PropertySet"},{"location":"en-US/Get-DefaultContext/#-progressaction","text":"{{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-ProgressAction"},{"location":"en-US/Get-DefaultContext/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"en-US/Get-DefaultContext/#inputs","text":"","title":"INPUTS"},{"location":"en-US/Get-DefaultContext/#outputs","text":"","title":"OUTPUTS"},{"location":"en-US/Get-DefaultContext/#systemcollectionshashtable","text":"","title":"System.Collections.Hashtable"},{"location":"en-US/Get-DefaultContext/#notes","text":"If you don't pass in Properties explicitly you will be prompted to for a properties file.","title":"NOTES"},{"location":"en-US/Get-DefaultContext/#related-links","text":"","title":"RELATED LINKS"},{"location":"en-US/Get-FeatureFlagFolder/","text":"Get-FeatureFlagFolder SYNOPSIS {{ Fill in the Synopsis }} SYNTAX Get-FeatureFlagFolder [-ProgressAction <ActionPreference>] [<CommonParameters>] DESCRIPTION {{ Fill in the Description }} EXAMPLES Example 1 PS C:\\> {{ Add example code here }} {{ Add example description here }} PARAMETERS -ProgressAction {{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS None OUTPUTS System.Object NOTES RELATED LINKS","title":"Get-FeatureFlagFolder"},{"location":"en-US/Get-FeatureFlagFolder/#get-featureflagfolder","text":"","title":"Get-FeatureFlagFolder"},{"location":"en-US/Get-FeatureFlagFolder/#synopsis","text":"{{ Fill in the Synopsis }}","title":"SYNOPSIS"},{"location":"en-US/Get-FeatureFlagFolder/#syntax","text":"Get-FeatureFlagFolder [-ProgressAction <ActionPreference>] [<CommonParameters>]","title":"SYNTAX"},{"location":"en-US/Get-FeatureFlagFolder/#description","text":"{{ Fill in the Description }}","title":"DESCRIPTION"},{"location":"en-US/Get-FeatureFlagFolder/#examples","text":"","title":"EXAMPLES"},{"location":"en-US/Get-FeatureFlagFolder/#example-1","text":"PS C:\\> {{ Add example code here }} {{ Add example description here }}","title":"Example 1"},{"location":"en-US/Get-FeatureFlagFolder/#parameters","text":"","title":"PARAMETERS"},{"location":"en-US/Get-FeatureFlagFolder/#-progressaction","text":"{{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-ProgressAction"},{"location":"en-US/Get-FeatureFlagFolder/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"en-US/Get-FeatureFlagFolder/#inputs","text":"","title":"INPUTS"},{"location":"en-US/Get-FeatureFlagFolder/#none","text":"","title":"None"},{"location":"en-US/Get-FeatureFlagFolder/#outputs","text":"","title":"OUTPUTS"},{"location":"en-US/Get-FeatureFlagFolder/#systemobject","text":"","title":"System.Object"},{"location":"en-US/Get-FeatureFlagFolder/#notes","text":"","title":"NOTES"},{"location":"en-US/Get-FeatureFlagFolder/#related-links","text":"","title":"RELATED LINKS"},{"location":"en-US/Get-PropertySet/","text":"Get-PropertySet SYNOPSIS {{ Fill in the Synopsis }} SYNTAX Get-PropertySet [[-Name] <String>] [-ProgressAction <ActionPreference>] [<CommonParameters>] DESCRIPTION {{ Fill in the Description }} EXAMPLES Example 1 PS C:\\> {{ Add example code here }} {{ Add example description here }} PARAMETERS -Name {{ Fill Name Description }} Type: String Parameter Sets: (All) Aliases: Required: False Position: 0 Default value: None Accept pipeline input: False Accept wildcard characters: False -ProgressAction {{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS None OUTPUTS System.Object NOTES RELATED LINKS","title":"Get-PropertySet"},{"location":"en-US/Get-PropertySet/#get-propertyset","text":"","title":"Get-PropertySet"},{"location":"en-US/Get-PropertySet/#synopsis","text":"{{ Fill in the Synopsis }}","title":"SYNOPSIS"},{"location":"en-US/Get-PropertySet/#syntax","text":"Get-PropertySet [[-Name] <String>] [-ProgressAction <ActionPreference>] [<CommonParameters>]","title":"SYNTAX"},{"location":"en-US/Get-PropertySet/#description","text":"{{ Fill in the Description }}","title":"DESCRIPTION"},{"location":"en-US/Get-PropertySet/#examples","text":"","title":"EXAMPLES"},{"location":"en-US/Get-PropertySet/#example-1","text":"PS C:\\> {{ Add example code here }} {{ Add example description here }}","title":"Example 1"},{"location":"en-US/Get-PropertySet/#parameters","text":"","title":"PARAMETERS"},{"location":"en-US/Get-PropertySet/#-name","text":"{{ Fill Name Description }} Type: String Parameter Sets: (All) Aliases: Required: False Position: 0 Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-Name"},{"location":"en-US/Get-PropertySet/#-progressaction","text":"{{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-ProgressAction"},{"location":"en-US/Get-PropertySet/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"en-US/Get-PropertySet/#inputs","text":"","title":"INPUTS"},{"location":"en-US/Get-PropertySet/#none","text":"","title":"None"},{"location":"en-US/Get-PropertySet/#outputs","text":"","title":"OUTPUTS"},{"location":"en-US/Get-PropertySet/#systemobject","text":"","title":"System.Object"},{"location":"en-US/Get-PropertySet/#notes","text":"","title":"NOTES"},{"location":"en-US/Get-PropertySet/#related-links","text":"","title":"RELATED LINKS"},{"location":"en-US/Get-PropertySetFolder/","text":"Get-PropertySetFolder SYNOPSIS {{ Fill in the Synopsis }} SYNTAX Get-PropertySetFolder [-ProgressAction <ActionPreference>] [<CommonParameters>] DESCRIPTION {{ Fill in the Description }} EXAMPLES Example 1 PS C:\\> {{ Add example code here }} {{ Add example description here }} PARAMETERS -ProgressAction {{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS None OUTPUTS System.Object NOTES RELATED LINKS","title":"Get-PropertySetFolder"},{"location":"en-US/Get-PropertySetFolder/#get-propertysetfolder","text":"","title":"Get-PropertySetFolder"},{"location":"en-US/Get-PropertySetFolder/#synopsis","text":"{{ Fill in the Synopsis }}","title":"SYNOPSIS"},{"location":"en-US/Get-PropertySetFolder/#syntax","text":"Get-PropertySetFolder [-ProgressAction <ActionPreference>] [<CommonParameters>]","title":"SYNTAX"},{"location":"en-US/Get-PropertySetFolder/#description","text":"{{ Fill in the Description }}","title":"DESCRIPTION"},{"location":"en-US/Get-PropertySetFolder/#examples","text":"","title":"EXAMPLES"},{"location":"en-US/Get-PropertySetFolder/#example-1","text":"PS C:\\> {{ Add example code here }} {{ Add example description here }}","title":"Example 1"},{"location":"en-US/Get-PropertySetFolder/#parameters","text":"","title":"PARAMETERS"},{"location":"en-US/Get-PropertySetFolder/#-progressaction","text":"{{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-ProgressAction"},{"location":"en-US/Get-PropertySetFolder/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"en-US/Get-PropertySetFolder/#inputs","text":"","title":"INPUTS"},{"location":"en-US/Get-PropertySetFolder/#none","text":"","title":"None"},{"location":"en-US/Get-PropertySetFolder/#outputs","text":"","title":"OUTPUTS"},{"location":"en-US/Get-PropertySetFolder/#systemobject","text":"","title":"System.Object"},{"location":"en-US/Get-PropertySetFolder/#notes","text":"","title":"NOTES"},{"location":"en-US/Get-PropertySetFolder/#related-links","text":"","title":"RELATED LINKS"},{"location":"en-US/Import-GatekeeperConfig/","text":"Import-GatekeeperConfig SYNOPSIS {{ Fill in the Synopsis }} SYNTAX Import-GatekeeperConfig [-ForceReload] [-ProgressAction <ActionPreference>] [<CommonParameters>] DESCRIPTION {{ Fill in the Description }} EXAMPLES Example 1 PS C:\\> {{ Add example code here }} {{ Add example description here }} PARAMETERS -ForceReload {{ Fill ForceReload Description }} Type: SwitchParameter Parameter Sets: (All) Aliases: Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False -ProgressAction {{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS None OUTPUTS System.Object NOTES RELATED LINKS","title":"Import-GatekeeperConfig"},{"location":"en-US/Import-GatekeeperConfig/#import-gatekeeperconfig","text":"","title":"Import-GatekeeperConfig"},{"location":"en-US/Import-GatekeeperConfig/#synopsis","text":"{{ Fill in the Synopsis }}","title":"SYNOPSIS"},{"location":"en-US/Import-GatekeeperConfig/#syntax","text":"Import-GatekeeperConfig [-ForceReload] [-ProgressAction <ActionPreference>] [<CommonParameters>]","title":"SYNTAX"},{"location":"en-US/Import-GatekeeperConfig/#description","text":"{{ Fill in the Description }}","title":"DESCRIPTION"},{"location":"en-US/Import-GatekeeperConfig/#examples","text":"","title":"EXAMPLES"},{"location":"en-US/Import-GatekeeperConfig/#example-1","text":"PS C:\\> {{ Add example code here }} {{ Add example description here }}","title":"Example 1"},{"location":"en-US/Import-GatekeeperConfig/#parameters","text":"","title":"PARAMETERS"},{"location":"en-US/Import-GatekeeperConfig/#-forcereload","text":"{{ Fill ForceReload Description }} Type: SwitchParameter Parameter Sets: (All) Aliases: Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-ForceReload"},{"location":"en-US/Import-GatekeeperConfig/#-progressaction","text":"{{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-ProgressAction"},{"location":"en-US/Import-GatekeeperConfig/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"en-US/Import-GatekeeperConfig/#inputs","text":"","title":"INPUTS"},{"location":"en-US/Import-GatekeeperConfig/#none","text":"","title":"None"},{"location":"en-US/Import-GatekeeperConfig/#outputs","text":"","title":"OUTPUTS"},{"location":"en-US/Import-GatekeeperConfig/#systemobject","text":"","title":"System.Object"},{"location":"en-US/Import-GatekeeperConfig/#notes","text":"","title":"NOTES"},{"location":"en-US/Import-GatekeeperConfig/#related-links","text":"","title":"RELATED LINKS"},{"location":"en-US/New-Condition/","text":"New-Condition SYNOPSIS Create a new condition for a property. SYNTAX New-Condition [-Property] <String> [-Operator] <Operator> [-Value] <Object> [-ProgressAction <ActionPreference>] [-WhatIf] [-Confirm] [<CommonParameters>] DESCRIPTION Create a new condition that can be used to define rules for feature flags. EXAMPLES EXAMPLE 1 $condition = New-Condition -Property 'Environment' -Operator 'Equals' -Value 'Production' This would create a new condition that checks if the 'Environment' property equals 'Production'. PARAMETERS -Property The property to evaluate (e.g., 'Environment', 'Region'). Type: String Parameter Sets: (All) Aliases: Required: True Position: 1 Default value: None Accept pipeline input: False Accept wildcard characters: False -Operator The operator to use for the evaluation (e.g., 'Equals', 'In'). Type: Operator Parameter Sets: (All) Aliases: Accepted values: Equals, NotEquals, GreaterThan, LessThan, In, NotIn Required: True Position: 2 Default value: None Accept pipeline input: False Accept wildcard characters: False -Value The value to compare against (e.g., 'Production', @('US', 'EU')). Type: Object Parameter Sets: (All) Aliases: Required: True Position: 3 Default value: None Accept pipeline input: False Accept wildcard characters: False -WhatIf Shows what would happen if the cmdlet runs. The cmdlet is not run. Type: SwitchParameter Parameter Sets: (All) Aliases: wi Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False -Confirm Prompts you for confirmation before running the cmdlet. Type: SwitchParameter Parameter Sets: (All) Aliases: cf Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False -ProgressAction {{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES General notes RELATED LINKS","title":"New-Condition"},{"location":"en-US/New-Condition/#new-condition","text":"","title":"New-Condition"},{"location":"en-US/New-Condition/#synopsis","text":"Create a new condition for a property.","title":"SYNOPSIS"},{"location":"en-US/New-Condition/#syntax","text":"New-Condition [-Property] <String> [-Operator] <Operator> [-Value] <Object> [-ProgressAction <ActionPreference>] [-WhatIf] [-Confirm] [<CommonParameters>]","title":"SYNTAX"},{"location":"en-US/New-Condition/#description","text":"Create a new condition that can be used to define rules for feature flags.","title":"DESCRIPTION"},{"location":"en-US/New-Condition/#examples","text":"","title":"EXAMPLES"},{"location":"en-US/New-Condition/#example-1","text":"$condition = New-Condition -Property 'Environment' -Operator 'Equals' -Value 'Production' This would create a new condition that checks if the 'Environment' property equals 'Production'.","title":"EXAMPLE 1"},{"location":"en-US/New-Condition/#parameters","text":"","title":"PARAMETERS"},{"location":"en-US/New-Condition/#-property","text":"The property to evaluate (e.g., 'Environment', 'Region'). Type: String Parameter Sets: (All) Aliases: Required: True Position: 1 Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-Property"},{"location":"en-US/New-Condition/#-operator","text":"The operator to use for the evaluation (e.g., 'Equals', 'In'). Type: Operator Parameter Sets: (All) Aliases: Accepted values: Equals, NotEquals, GreaterThan, LessThan, In, NotIn Required: True Position: 2 Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-Operator"},{"location":"en-US/New-Condition/#-value","text":"The value to compare against (e.g., 'Production', @('US', 'EU')). Type: Object Parameter Sets: (All) Aliases: Required: True Position: 3 Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-Value"},{"location":"en-US/New-Condition/#-whatif","text":"Shows what would happen if the cmdlet runs. The cmdlet is not run. Type: SwitchParameter Parameter Sets: (All) Aliases: wi Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-WhatIf"},{"location":"en-US/New-Condition/#-confirm","text":"Prompts you for confirmation before running the cmdlet. Type: SwitchParameter Parameter Sets: (All) Aliases: cf Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-Confirm"},{"location":"en-US/New-Condition/#-progressaction","text":"{{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-ProgressAction"},{"location":"en-US/New-Condition/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"en-US/New-Condition/#inputs","text":"","title":"INPUTS"},{"location":"en-US/New-Condition/#outputs","text":"","title":"OUTPUTS"},{"location":"en-US/New-Condition/#notes","text":"General notes","title":"NOTES"},{"location":"en-US/New-Condition/#related-links","text":"","title":"RELATED LINKS"},{"location":"en-US/New-ConditionGroup/","text":"New-ConditionGroup SYNOPSIS Create a new condition group for feature flags. SYNTAX New-ConditionGroup [-Operator] <String> [-Conditions] <ConditionGroup> [-ProgressAction <ActionPreference>] [-WhatIf] [-Confirm] [<CommonParameters>] DESCRIPTION Create a new condition group that can be used to define rules for feature flags. EXAMPLES EXAMPLE 1 $conditionGroup = New-ConditionGroup -JoinOperator 'AllOf' -Conditions @($condition1, $condition2) This would create a new condition group that requires all of the specified conditions to be met. PARAMETERS -Operator {{ Fill Operator Description }} Type: String Parameter Sets: (All) Aliases: Required: True Position: 1 Default value: None Accept pipeline input: False Accept wildcard characters: False -Conditions The conditions that are part of the group. This can be a single condition or an array of conditions. Type: ConditionGroup Parameter Sets: (All) Aliases: Required: True Position: 2 Default value: None Accept pipeline input: False Accept wildcard characters: False -WhatIf Shows what would happen if the cmdlet runs. The cmdlet is not run. Type: SwitchParameter Parameter Sets: (All) Aliases: wi Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False -Confirm Prompts you for confirmation before running the cmdlet. Type: SwitchParameter Parameter Sets: (All) Aliases: cf Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False -ProgressAction {{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES General notes RELATED LINKS","title":"New-ConditionGroup"},{"location":"en-US/New-ConditionGroup/#new-conditiongroup","text":"","title":"New-ConditionGroup"},{"location":"en-US/New-ConditionGroup/#synopsis","text":"Create a new condition group for feature flags.","title":"SYNOPSIS"},{"location":"en-US/New-ConditionGroup/#syntax","text":"New-ConditionGroup [-Operator] <String> [-Conditions] <ConditionGroup> [-ProgressAction <ActionPreference>] [-WhatIf] [-Confirm] [<CommonParameters>]","title":"SYNTAX"},{"location":"en-US/New-ConditionGroup/#description","text":"Create a new condition group that can be used to define rules for feature flags.","title":"DESCRIPTION"},{"location":"en-US/New-ConditionGroup/#examples","text":"","title":"EXAMPLES"},{"location":"en-US/New-ConditionGroup/#example-1","text":"$conditionGroup = New-ConditionGroup -JoinOperator 'AllOf' -Conditions @($condition1, $condition2) This would create a new condition group that requires all of the specified conditions to be met.","title":"EXAMPLE 1"},{"location":"en-US/New-ConditionGroup/#parameters","text":"","title":"PARAMETERS"},{"location":"en-US/New-ConditionGroup/#-operator","text":"{{ Fill Operator Description }} Type: String Parameter Sets: (All) Aliases: Required: True Position: 1 Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-Operator"},{"location":"en-US/New-ConditionGroup/#-conditions","text":"The conditions that are part of the group. This can be a single condition or an array of conditions. Type: ConditionGroup Parameter Sets: (All) Aliases: Required: True Position: 2 Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-Conditions"},{"location":"en-US/New-ConditionGroup/#-whatif","text":"Shows what would happen if the cmdlet runs. The cmdlet is not run. Type: SwitchParameter Parameter Sets: (All) Aliases: wi Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-WhatIf"},{"location":"en-US/New-ConditionGroup/#-confirm","text":"Prompts you for confirmation before running the cmdlet. Type: SwitchParameter Parameter Sets: (All) Aliases: cf Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-Confirm"},{"location":"en-US/New-ConditionGroup/#-progressaction","text":"{{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-ProgressAction"},{"location":"en-US/New-ConditionGroup/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"en-US/New-ConditionGroup/#inputs","text":"","title":"INPUTS"},{"location":"en-US/New-ConditionGroup/#outputs","text":"","title":"OUTPUTS"},{"location":"en-US/New-ConditionGroup/#notes","text":"General notes","title":"NOTES"},{"location":"en-US/New-ConditionGroup/#related-links","text":"","title":"RELATED LINKS"},{"location":"en-US/New-FeatureFlag/","text":"New-FeatureFlag SYNOPSIS Create a new feature flag. SYNTAX New-FeatureFlag [-Name] <String> [[-Description] <String>] [-Tags <String[]>] [-Version <Version>] [-Author <String>] [-DefaultEffect <Effect>] -Rules <Rule[]> [-FilePath <String>] [-ProgressAction <ActionPreference>] [-WhatIf] [-Confirm] [<CommonParameters>] DESCRIPTION Create a new feature flag to export. EXAMPLES EXAMPLE 1 $featureFlag = New-FeatureFlag -Name 'MyFeatureFlag' This would create a new feature flag object with the specified name. PARAMETERS -Name The name of the feature flag. Type: String Parameter Sets: (All) Aliases: Required: True Position: 1 Default value: None Accept pipeline input: False Accept wildcard characters: False -Description A description of the feature flag. Type: String Parameter Sets: (All) Aliases: Required: False Position: 2 Default value: \"Feature flag for $Name\" Accept pipeline input: False Accept wildcard characters: False -Tags Tags associated with the feature flag, useful for categorization. Type: String[] Parameter Sets: (All) Aliases: Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False -Version The version of the feature flag, defaults to \"1.0.0\". Type: Version Parameter Sets: (All) Aliases: Required: False Position: Named Default value: [version]\"1.0.0\" Accept pipeline input: False Accept wildcard characters: False -Author The author of the feature flag, defaults to the current username. Type: String Parameter Sets: (All) Aliases: Required: False Position: Named Default value: $env:USERNAME Accept pipeline input: False Accept wildcard characters: False -DefaultEffect The default effect of the feature flag, which can be Warn, Allow, or Deny. Defaults to Warn. Type: Effect Parameter Sets: (All) Aliases: Accepted values: Allow, Deny, Audit, Warn Required: False Position: Named Default value: Warn Accept pipeline input: False Accept wildcard characters: False -Rules A list of rules that define the conditions under which the feature flag is applied. Type: Rule[] Parameter Sets: (All) Aliases: Required: True Position: Named Default value: @() Accept pipeline input: True (ByValue) Accept wildcard characters: False -FilePath The file path where the feature flag will be saved. If not specified, it will be saved in the default feature flag folder. This is usually preferred. Type: String Parameter Sets: (All) Aliases: Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False -WhatIf Shows what would happen if the cmdlet runs. The cmdlet is not run. Type: SwitchParameter Parameter Sets: (All) Aliases: wi Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False -Confirm Prompts you for confirmation before running the cmdlet. Type: SwitchParameter Parameter Sets: (All) Aliases: cf Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False -ProgressAction {{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS FeatureFlag NOTES RELATED LINKS","title":"New-FeatureFlag"},{"location":"en-US/New-FeatureFlag/#new-featureflag","text":"","title":"New-FeatureFlag"},{"location":"en-US/New-FeatureFlag/#synopsis","text":"Create a new feature flag.","title":"SYNOPSIS"},{"location":"en-US/New-FeatureFlag/#syntax","text":"New-FeatureFlag [-Name] <String> [[-Description] <String>] [-Tags <String[]>] [-Version <Version>] [-Author <String>] [-DefaultEffect <Effect>] -Rules <Rule[]> [-FilePath <String>] [-ProgressAction <ActionPreference>] [-WhatIf] [-Confirm] [<CommonParameters>]","title":"SYNTAX"},{"location":"en-US/New-FeatureFlag/#description","text":"Create a new feature flag to export.","title":"DESCRIPTION"},{"location":"en-US/New-FeatureFlag/#examples","text":"","title":"EXAMPLES"},{"location":"en-US/New-FeatureFlag/#example-1","text":"$featureFlag = New-FeatureFlag -Name 'MyFeatureFlag' This would create a new feature flag object with the specified name.","title":"EXAMPLE 1"},{"location":"en-US/New-FeatureFlag/#parameters","text":"","title":"PARAMETERS"},{"location":"en-US/New-FeatureFlag/#-name","text":"The name of the feature flag. Type: String Parameter Sets: (All) Aliases: Required: True Position: 1 Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-Name"},{"location":"en-US/New-FeatureFlag/#-description","text":"A description of the feature flag. Type: String Parameter Sets: (All) Aliases: Required: False Position: 2 Default value: \"Feature flag for $Name\" Accept pipeline input: False Accept wildcard characters: False","title":"-Description"},{"location":"en-US/New-FeatureFlag/#-tags","text":"Tags associated with the feature flag, useful for categorization. Type: String[] Parameter Sets: (All) Aliases: Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-Tags"},{"location":"en-US/New-FeatureFlag/#-version","text":"The version of the feature flag, defaults to \"1.0.0\". Type: Version Parameter Sets: (All) Aliases: Required: False Position: Named Default value: [version]\"1.0.0\" Accept pipeline input: False Accept wildcard characters: False","title":"-Version"},{"location":"en-US/New-FeatureFlag/#-author","text":"The author of the feature flag, defaults to the current username. Type: String Parameter Sets: (All) Aliases: Required: False Position: Named Default value: $env:USERNAME Accept pipeline input: False Accept wildcard characters: False","title":"-Author"},{"location":"en-US/New-FeatureFlag/#-defaulteffect","text":"The default effect of the feature flag, which can be Warn, Allow, or Deny. Defaults to Warn. Type: Effect Parameter Sets: (All) Aliases: Accepted values: Allow, Deny, Audit, Warn Required: False Position: Named Default value: Warn Accept pipeline input: False Accept wildcard characters: False","title":"-DefaultEffect"},{"location":"en-US/New-FeatureFlag/#-rules","text":"A list of rules that define the conditions under which the feature flag is applied. Type: Rule[] Parameter Sets: (All) Aliases: Required: True Position: Named Default value: @() Accept pipeline input: True (ByValue) Accept wildcard characters: False","title":"-Rules"},{"location":"en-US/New-FeatureFlag/#-filepath","text":"The file path where the feature flag will be saved. If not specified, it will be saved in the default feature flag folder. This is usually preferred. Type: String Parameter Sets: (All) Aliases: Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-FilePath"},{"location":"en-US/New-FeatureFlag/#-whatif","text":"Shows what would happen if the cmdlet runs. The cmdlet is not run. Type: SwitchParameter Parameter Sets: (All) Aliases: wi Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-WhatIf"},{"location":"en-US/New-FeatureFlag/#-confirm","text":"Prompts you for confirmation before running the cmdlet. Type: SwitchParameter Parameter Sets: (All) Aliases: cf Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-Confirm"},{"location":"en-US/New-FeatureFlag/#-progressaction","text":"{{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-ProgressAction"},{"location":"en-US/New-FeatureFlag/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"en-US/New-FeatureFlag/#inputs","text":"","title":"INPUTS"},{"location":"en-US/New-FeatureFlag/#outputs","text":"","title":"OUTPUTS"},{"location":"en-US/New-FeatureFlag/#featureflag","text":"","title":"FeatureFlag"},{"location":"en-US/New-FeatureFlag/#notes","text":"","title":"NOTES"},{"location":"en-US/New-FeatureFlag/#related-links","text":"","title":"RELATED LINKS"},{"location":"en-US/New-Property/","text":"New-Property SYNOPSIS Create a new property definition. SYNTAX New-Property [-Name] <String> [-Type] <String> [[-EnumValues] <Object[]>] [[-Validation] <Hashtable>] [-ProgressAction <ActionPreference>] [-WhatIf] [-Confirm] [<CommonParameters>] DESCRIPTION Create a new property definition to use with your property set. EXAMPLES EXAMPLE 1 $properties = @() $properties += New-Property -Name 'Hostname' -Type 'string' -Validation @{Pattern='*.contoso.com'} $set = New-PropertySet -Properties $properties This would create a new property object and create a new set with that property. PARAMETERS -Name The name of the property. Type: String Parameter Sets: (All) Aliases: Required: True Position: 1 Default value: None Accept pipeline input: False Accept wildcard characters: False -Type The type of property. Limited to: string, integer, boolean Type: String Parameter Sets: (All) Aliases: Required: True Position: 2 Default value: None Accept pipeline input: False Accept wildcard characters: False -EnumValues If the values should be limited to a set, private an array of values. Type: Object[] Parameter Sets: (All) Aliases: Required: False Position: 3 Default value: None Accept pipeline input: False Accept wildcard characters: False -Validation Parameter description Type: Hashtable Parameter Sets: (All) Aliases: Required: False Position: 4 Default value: None Accept pipeline input: False Accept wildcard characters: False -WhatIf Shows what would happen if the cmdlet runs. The cmdlet is not run. Type: SwitchParameter Parameter Sets: (All) Aliases: wi Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False -Confirm Prompts you for confirmation before running the cmdlet. Type: SwitchParameter Parameter Sets: (All) Aliases: cf Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False -ProgressAction {{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS PropertyDefinition NOTES RELATED LINKS","title":"New-Property"},{"location":"en-US/New-Property/#new-property","text":"","title":"New-Property"},{"location":"en-US/New-Property/#synopsis","text":"Create a new property definition.","title":"SYNOPSIS"},{"location":"en-US/New-Property/#syntax","text":"New-Property [-Name] <String> [-Type] <String> [[-EnumValues] <Object[]>] [[-Validation] <Hashtable>] [-ProgressAction <ActionPreference>] [-WhatIf] [-Confirm] [<CommonParameters>]","title":"SYNTAX"},{"location":"en-US/New-Property/#description","text":"Create a new property definition to use with your property set.","title":"DESCRIPTION"},{"location":"en-US/New-Property/#examples","text":"","title":"EXAMPLES"},{"location":"en-US/New-Property/#example-1","text":"$properties = @() $properties += New-Property -Name 'Hostname' -Type 'string' -Validation @{Pattern='*.contoso.com'} $set = New-PropertySet -Properties $properties This would create a new property object and create a new set with that property.","title":"EXAMPLE 1"},{"location":"en-US/New-Property/#parameters","text":"","title":"PARAMETERS"},{"location":"en-US/New-Property/#-name","text":"The name of the property. Type: String Parameter Sets: (All) Aliases: Required: True Position: 1 Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-Name"},{"location":"en-US/New-Property/#-type","text":"The type of property. Limited to: string, integer, boolean Type: String Parameter Sets: (All) Aliases: Required: True Position: 2 Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-Type"},{"location":"en-US/New-Property/#-enumvalues","text":"If the values should be limited to a set, private an array of values. Type: Object[] Parameter Sets: (All) Aliases: Required: False Position: 3 Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-EnumValues"},{"location":"en-US/New-Property/#-validation","text":"Parameter description Type: Hashtable Parameter Sets: (All) Aliases: Required: False Position: 4 Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-Validation"},{"location":"en-US/New-Property/#-whatif","text":"Shows what would happen if the cmdlet runs. The cmdlet is not run. Type: SwitchParameter Parameter Sets: (All) Aliases: wi Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-WhatIf"},{"location":"en-US/New-Property/#-confirm","text":"Prompts you for confirmation before running the cmdlet. Type: SwitchParameter Parameter Sets: (All) Aliases: cf Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-Confirm"},{"location":"en-US/New-Property/#-progressaction","text":"{{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-ProgressAction"},{"location":"en-US/New-Property/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"en-US/New-Property/#inputs","text":"","title":"INPUTS"},{"location":"en-US/New-Property/#outputs","text":"","title":"OUTPUTS"},{"location":"en-US/New-Property/#propertydefinition","text":"","title":"PropertyDefinition"},{"location":"en-US/New-Property/#notes","text":"","title":"NOTES"},{"location":"en-US/New-Property/#related-links","text":"","title":"RELATED LINKS"},{"location":"en-US/New-PropertySet/","text":"New-PropertySet SYNOPSIS Create a new property set. SYNTAX New-PropertySet [[-Name] <String>] [[-Properties] <PropertyDefinition[]>] [-ProgressAction <ActionPreference>] [-WhatIf] [-Confirm] [<CommonParameters>] DESCRIPTION Create a new property set to export. EXAMPLES EXAMPLE 1 $properties = @() $properties += New-Property -Name 'Hostname' -Type 'string' -Validation @{Pattern='*.contoso.com'} $set = New-PropertySet -Properties $properties This would create a new property object and create a new set with that property. PARAMETERS -Name {{ Fill Name Description }} Type: String Parameter Sets: (All) Aliases: Required: False Position: 1 Default value: None Accept pipeline input: False Accept wildcard characters: False -Properties A list of properties, typically created by `New-Property`. Type: PropertyDefinition[] Parameter Sets: (All) Aliases: Required: False Position: 2 Default value: None Accept pipeline input: True (ByValue) Accept wildcard characters: False -WhatIf Shows what would happen if the cmdlet runs. The cmdlet is not run. Type: SwitchParameter Parameter Sets: (All) Aliases: wi Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False -Confirm Prompts you for confirmation before running the cmdlet. Type: SwitchParameter Parameter Sets: (All) Aliases: cf Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False -ProgressAction {{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS PropertySet NOTES RELATED LINKS","title":"New-PropertySet"},{"location":"en-US/New-PropertySet/#new-propertyset","text":"","title":"New-PropertySet"},{"location":"en-US/New-PropertySet/#synopsis","text":"Create a new property set.","title":"SYNOPSIS"},{"location":"en-US/New-PropertySet/#syntax","text":"New-PropertySet [[-Name] <String>] [[-Properties] <PropertyDefinition[]>] [-ProgressAction <ActionPreference>] [-WhatIf] [-Confirm] [<CommonParameters>]","title":"SYNTAX"},{"location":"en-US/New-PropertySet/#description","text":"Create a new property set to export.","title":"DESCRIPTION"},{"location":"en-US/New-PropertySet/#examples","text":"","title":"EXAMPLES"},{"location":"en-US/New-PropertySet/#example-1","text":"$properties = @() $properties += New-Property -Name 'Hostname' -Type 'string' -Validation @{Pattern='*.contoso.com'} $set = New-PropertySet -Properties $properties This would create a new property object and create a new set with that property.","title":"EXAMPLE 1"},{"location":"en-US/New-PropertySet/#parameters","text":"","title":"PARAMETERS"},{"location":"en-US/New-PropertySet/#-name","text":"{{ Fill Name Description }} Type: String Parameter Sets: (All) Aliases: Required: False Position: 1 Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-Name"},{"location":"en-US/New-PropertySet/#-properties","text":"A list of properties, typically created by `New-Property`. Type: PropertyDefinition[] Parameter Sets: (All) Aliases: Required: False Position: 2 Default value: None Accept pipeline input: True (ByValue) Accept wildcard characters: False","title":"-Properties"},{"location":"en-US/New-PropertySet/#-whatif","text":"Shows what would happen if the cmdlet runs. The cmdlet is not run. Type: SwitchParameter Parameter Sets: (All) Aliases: wi Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-WhatIf"},{"location":"en-US/New-PropertySet/#-confirm","text":"Prompts you for confirmation before running the cmdlet. Type: SwitchParameter Parameter Sets: (All) Aliases: cf Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-Confirm"},{"location":"en-US/New-PropertySet/#-progressaction","text":"{{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-ProgressAction"},{"location":"en-US/New-PropertySet/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"en-US/New-PropertySet/#inputs","text":"","title":"INPUTS"},{"location":"en-US/New-PropertySet/#outputs","text":"","title":"OUTPUTS"},{"location":"en-US/New-PropertySet/#propertyset","text":"","title":"PropertySet"},{"location":"en-US/New-PropertySet/#notes","text":"","title":"NOTES"},{"location":"en-US/New-PropertySet/#related-links","text":"","title":"RELATED LINKS"},{"location":"en-US/New-Rule/","text":"New-Rule SYNOPSIS Create a new rule for a feature flag. SYNTAX New-Rule [-Name] <String> [[-Description] <Object>] [-Effect] <Effect> [-Conditions] <ConditionGroup> [-ProgressAction <ActionPreference>] [-WhatIf] [-Confirm] [<CommonParameters>] DESCRIPTION Create a new rule that can be used to define conditions under which a feature flag is applied. EXAMPLES EXAMPLE 1 $condition1 = New-Condition -Property 'Environment' -Operator 'Equals' -Value 'Production' $condition2 = New-Condition -Property 'Region' -Operator 'In' -Value @('US', 'EU') $rule = New-Rule -Name 'ProductionRule' -Effect 'Allow' -Conditions $condition1, $condition2 This would create a new rule named 'ProductionRule' that allows the feature flag in production environments and specific regions. PARAMETERS -Name The name of the rule. Type: String Parameter Sets: (All) Aliases: Required: True Position: 1 Default value: None Accept pipeline input: False Accept wildcard characters: False -Description A brief description of the rule. This is optional and can be used to provide additional context about the rule. Type: Object Parameter Sets: (All) Aliases: Required: False Position: 2 Default value: None Accept pipeline input: False Accept wildcard characters: False -Effect The effect of the rule (e.g., allow, deny). Type: Effect Parameter Sets: (All) Aliases: Accepted values: Allow, Deny, Audit, Warn Required: True Position: 3 Default value: None Accept pipeline input: False Accept wildcard characters: False -Conditions The conditions under which the rule applies. Type: ConditionGroup Parameter Sets: (All) Aliases: Required: True Position: 4 Default value: None Accept pipeline input: True (ByValue) Accept wildcard characters: False -WhatIf Shows what would happen if the cmdlet runs. The cmdlet is not run. Type: SwitchParameter Parameter Sets: (All) Aliases: wi Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False -Confirm Prompts you for confirmation before running the cmdlet. Type: SwitchParameter Parameter Sets: (All) Aliases: cf Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False -ProgressAction {{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS Rule NOTES RELATED LINKS","title":"New-Rule"},{"location":"en-US/New-Rule/#new-rule","text":"","title":"New-Rule"},{"location":"en-US/New-Rule/#synopsis","text":"Create a new rule for a feature flag.","title":"SYNOPSIS"},{"location":"en-US/New-Rule/#syntax","text":"New-Rule [-Name] <String> [[-Description] <Object>] [-Effect] <Effect> [-Conditions] <ConditionGroup> [-ProgressAction <ActionPreference>] [-WhatIf] [-Confirm] [<CommonParameters>]","title":"SYNTAX"},{"location":"en-US/New-Rule/#description","text":"Create a new rule that can be used to define conditions under which a feature flag is applied.","title":"DESCRIPTION"},{"location":"en-US/New-Rule/#examples","text":"","title":"EXAMPLES"},{"location":"en-US/New-Rule/#example-1","text":"$condition1 = New-Condition -Property 'Environment' -Operator 'Equals' -Value 'Production' $condition2 = New-Condition -Property 'Region' -Operator 'In' -Value @('US', 'EU') $rule = New-Rule -Name 'ProductionRule' -Effect 'Allow' -Conditions $condition1, $condition2 This would create a new rule named 'ProductionRule' that allows the feature flag in production environments and specific regions.","title":"EXAMPLE 1"},{"location":"en-US/New-Rule/#parameters","text":"","title":"PARAMETERS"},{"location":"en-US/New-Rule/#-name","text":"The name of the rule. Type: String Parameter Sets: (All) Aliases: Required: True Position: 1 Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-Name"},{"location":"en-US/New-Rule/#-description","text":"A brief description of the rule. This is optional and can be used to provide additional context about the rule. Type: Object Parameter Sets: (All) Aliases: Required: False Position: 2 Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-Description"},{"location":"en-US/New-Rule/#-effect","text":"The effect of the rule (e.g., allow, deny). Type: Effect Parameter Sets: (All) Aliases: Accepted values: Allow, Deny, Audit, Warn Required: True Position: 3 Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-Effect"},{"location":"en-US/New-Rule/#-conditions","text":"The conditions under which the rule applies. Type: ConditionGroup Parameter Sets: (All) Aliases: Required: True Position: 4 Default value: None Accept pipeline input: True (ByValue) Accept wildcard characters: False","title":"-Conditions"},{"location":"en-US/New-Rule/#-whatif","text":"Shows what would happen if the cmdlet runs. The cmdlet is not run. Type: SwitchParameter Parameter Sets: (All) Aliases: wi Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-WhatIf"},{"location":"en-US/New-Rule/#-confirm","text":"Prompts you for confirmation before running the cmdlet. Type: SwitchParameter Parameter Sets: (All) Aliases: cf Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-Confirm"},{"location":"en-US/New-Rule/#-progressaction","text":"{{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-ProgressAction"},{"location":"en-US/New-Rule/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"en-US/New-Rule/#inputs","text":"","title":"INPUTS"},{"location":"en-US/New-Rule/#outputs","text":"","title":"OUTPUTS"},{"location":"en-US/New-Rule/#rule","text":"","title":"Rule"},{"location":"en-US/New-Rule/#notes","text":"","title":"NOTES"},{"location":"en-US/New-Rule/#related-links","text":"","title":"RELATED LINKS"},{"location":"en-US/Read-FeatureFlag/","text":"Read-FeatureFlag SYNOPSIS Read a feature flag from disk. SYNTAX ByName Read-FeatureFlag [-Name] <String> [-ProgressAction <ActionPreference>] [<CommonParameters>] ByFilePath Read-FeatureFlag -FilePath <Object> [-ProgressAction <ActionPreference>] [<CommonParameters>] DESCRIPTION Reads the feature flag json file from disk and convert it to a feature flag object. EXAMPLES EXAMPLE 1 Read-FeatureFlag -FilePath 'MyFeature.json Read the feature from disk. PARAMETERS -Name {{ Fill Name Description }} Type: String Parameter Sets: ByName Aliases: Required: True Position: 1 Default value: None Accept pipeline input: False Accept wildcard characters: False -FilePath The file path to the json. Type: Object Parameter Sets: ByFilePath Aliases: Required: True Position: Named Default value: None Accept pipeline input: True (ByValue) Accept wildcard characters: False -ProgressAction {{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.Collections.Generic.List`1[[PropertySet, PowerShell Class Assembly, Version=1.0.0.2, Culture=neutral, PublicKeyToken=null]] NOTES RELATED LINKS","title":"Read-FeatureFlag"},{"location":"en-US/Read-FeatureFlag/#read-featureflag","text":"","title":"Read-FeatureFlag"},{"location":"en-US/Read-FeatureFlag/#synopsis","text":"Read a feature flag from disk.","title":"SYNOPSIS"},{"location":"en-US/Read-FeatureFlag/#syntax","text":"","title":"SYNTAX"},{"location":"en-US/Read-FeatureFlag/#byname","text":"Read-FeatureFlag [-Name] <String> [-ProgressAction <ActionPreference>] [<CommonParameters>]","title":"ByName"},{"location":"en-US/Read-FeatureFlag/#byfilepath","text":"Read-FeatureFlag -FilePath <Object> [-ProgressAction <ActionPreference>] [<CommonParameters>]","title":"ByFilePath"},{"location":"en-US/Read-FeatureFlag/#description","text":"Reads the feature flag json file from disk and convert it to a feature flag object.","title":"DESCRIPTION"},{"location":"en-US/Read-FeatureFlag/#examples","text":"","title":"EXAMPLES"},{"location":"en-US/Read-FeatureFlag/#example-1","text":"Read-FeatureFlag -FilePath 'MyFeature.json Read the feature from disk.","title":"EXAMPLE 1"},{"location":"en-US/Read-FeatureFlag/#parameters","text":"","title":"PARAMETERS"},{"location":"en-US/Read-FeatureFlag/#-name","text":"{{ Fill Name Description }} Type: String Parameter Sets: ByName Aliases: Required: True Position: 1 Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-Name"},{"location":"en-US/Read-FeatureFlag/#-filepath","text":"The file path to the json. Type: Object Parameter Sets: ByFilePath Aliases: Required: True Position: Named Default value: None Accept pipeline input: True (ByValue) Accept wildcard characters: False","title":"-FilePath"},{"location":"en-US/Read-FeatureFlag/#-progressaction","text":"{{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-ProgressAction"},{"location":"en-US/Read-FeatureFlag/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"en-US/Read-FeatureFlag/#inputs","text":"","title":"INPUTS"},{"location":"en-US/Read-FeatureFlag/#outputs","text":"","title":"OUTPUTS"},{"location":"en-US/Read-FeatureFlag/#systemcollectionsgenericlist1propertyset-powershell-class-assembly-version1002-cultureneutral-publickeytokennull","text":"","title":"System.Collections.Generic.List`1[[PropertySet, PowerShell Class Assembly, Version=1.0.0.2, Culture=neutral, PublicKeyToken=null]]"},{"location":"en-US/Read-FeatureFlag/#notes","text":"","title":"NOTES"},{"location":"en-US/Read-FeatureFlag/#related-links","text":"","title":"RELATED LINKS"},{"location":"en-US/Read-PropertySet/","text":"Read-PropertySet SYNOPSIS Read the properties from disk. SYNTAX ByName Read-PropertySet [-Name] <String> [-ProgressAction <ActionPreference>] [<CommonParameters>] ByFilePath Read-PropertySet -FilePath <Object> [-ProgressAction <ActionPreference>] [<CommonParameters>] DESCRIPTION Reads the properties json file from disk and convert it to a property set. EXAMPLES EXAMPLE 1 Read-PropertySet -FilePath 'C:\\foo\\properties.json' This would return a PropertySet object that contains all of the properties to evaluate. PARAMETERS -Name {{ Fill Name Description }} Type: String Parameter Sets: ByName Aliases: Required: True Position: 1 Default value: None Accept pipeline input: False Accept wildcard characters: False -FilePath The file path to the json. Type: Object Parameter Sets: ByFilePath Aliases: Required: True Position: Named Default value: None Accept pipeline input: True (ByValue) Accept wildcard characters: False -ProgressAction {{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS System.Collections.Generic.List`1[[PropertySet, PowerShell Class Assembly, Version=1.0.0.2, Culture=neutral, PublicKeyToken=null]] NOTES RELATED LINKS","title":"Read-PropertySet"},{"location":"en-US/Read-PropertySet/#read-propertyset","text":"","title":"Read-PropertySet"},{"location":"en-US/Read-PropertySet/#synopsis","text":"Read the properties from disk.","title":"SYNOPSIS"},{"location":"en-US/Read-PropertySet/#syntax","text":"","title":"SYNTAX"},{"location":"en-US/Read-PropertySet/#byname","text":"Read-PropertySet [-Name] <String> [-ProgressAction <ActionPreference>] [<CommonParameters>]","title":"ByName"},{"location":"en-US/Read-PropertySet/#byfilepath","text":"Read-PropertySet -FilePath <Object> [-ProgressAction <ActionPreference>] [<CommonParameters>]","title":"ByFilePath"},{"location":"en-US/Read-PropertySet/#description","text":"Reads the properties json file from disk and convert it to a property set.","title":"DESCRIPTION"},{"location":"en-US/Read-PropertySet/#examples","text":"","title":"EXAMPLES"},{"location":"en-US/Read-PropertySet/#example-1","text":"Read-PropertySet -FilePath 'C:\\foo\\properties.json' This would return a PropertySet object that contains all of the properties to evaluate.","title":"EXAMPLE 1"},{"location":"en-US/Read-PropertySet/#parameters","text":"","title":"PARAMETERS"},{"location":"en-US/Read-PropertySet/#-name","text":"{{ Fill Name Description }} Type: String Parameter Sets: ByName Aliases: Required: True Position: 1 Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-Name"},{"location":"en-US/Read-PropertySet/#-filepath","text":"The file path to the json. Type: Object Parameter Sets: ByFilePath Aliases: Required: True Position: Named Default value: None Accept pipeline input: True (ByValue) Accept wildcard characters: False","title":"-FilePath"},{"location":"en-US/Read-PropertySet/#-progressaction","text":"{{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-ProgressAction"},{"location":"en-US/Read-PropertySet/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"en-US/Read-PropertySet/#inputs","text":"","title":"INPUTS"},{"location":"en-US/Read-PropertySet/#outputs","text":"","title":"OUTPUTS"},{"location":"en-US/Read-PropertySet/#systemcollectionsgenericlist1propertyset-powershell-class-assembly-version1002-cultureneutral-publickeytokennull","text":"","title":"System.Collections.Generic.List`1[[PropertySet, PowerShell Class Assembly, Version=1.0.0.2, Culture=neutral, PublicKeyToken=null]]"},{"location":"en-US/Read-PropertySet/#notes","text":"","title":"NOTES"},{"location":"en-US/Read-PropertySet/#related-links","text":"","title":"RELATED LINKS"},{"location":"en-US/Save-FeatureFlag/","text":"Save-FeatureFlag SYNOPSIS Save a FeatureFlag to a file. SYNTAX Save-FeatureFlag [-FeatureFlag] <FeatureFlag> [[-FilePath] <String>] [-ProgressAction <ActionPreference>] [<CommonParameters>] DESCRIPTION Save a PropertySet to a specified file path in JSON format. This cmdlet allows you to persist the PropertySet for later use or sharing. EXAMPLES EXAMPLE 1 Save-FeatureFlag -PropertySet $myPropertySet -FilePath \"C:\\path\\to\\file.json\" Save the PropertySet to a JSON file at the specified path. PARAMETERS -FeatureFlag {{ Fill FeatureFlag Description }} Type: FeatureFlag Parameter Sets: (All) Aliases: Required: True Position: 1 Default value: None Accept pipeline input: True (ByValue) Accept wildcard characters: False -FilePath The file path to save the PropertySet to. Type: String Parameter Sets: (All) Aliases: Required: False Position: 2 Default value: None Accept pipeline input: False Accept wildcard characters: False -ProgressAction {{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Save-FeatureFlag"},{"location":"en-US/Save-FeatureFlag/#save-featureflag","text":"","title":"Save-FeatureFlag"},{"location":"en-US/Save-FeatureFlag/#synopsis","text":"Save a FeatureFlag to a file.","title":"SYNOPSIS"},{"location":"en-US/Save-FeatureFlag/#syntax","text":"Save-FeatureFlag [-FeatureFlag] <FeatureFlag> [[-FilePath] <String>] [-ProgressAction <ActionPreference>] [<CommonParameters>]","title":"SYNTAX"},{"location":"en-US/Save-FeatureFlag/#description","text":"Save a PropertySet to a specified file path in JSON format. This cmdlet allows you to persist the PropertySet for later use or sharing.","title":"DESCRIPTION"},{"location":"en-US/Save-FeatureFlag/#examples","text":"","title":"EXAMPLES"},{"location":"en-US/Save-FeatureFlag/#example-1","text":"Save-FeatureFlag -PropertySet $myPropertySet -FilePath \"C:\\path\\to\\file.json\" Save the PropertySet to a JSON file at the specified path.","title":"EXAMPLE 1"},{"location":"en-US/Save-FeatureFlag/#parameters","text":"","title":"PARAMETERS"},{"location":"en-US/Save-FeatureFlag/#-featureflag","text":"{{ Fill FeatureFlag Description }} Type: FeatureFlag Parameter Sets: (All) Aliases: Required: True Position: 1 Default value: None Accept pipeline input: True (ByValue) Accept wildcard characters: False","title":"-FeatureFlag"},{"location":"en-US/Save-FeatureFlag/#-filepath","text":"The file path to save the PropertySet to. Type: String Parameter Sets: (All) Aliases: Required: False Position: 2 Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-FilePath"},{"location":"en-US/Save-FeatureFlag/#-progressaction","text":"{{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-ProgressAction"},{"location":"en-US/Save-FeatureFlag/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"en-US/Save-FeatureFlag/#inputs","text":"","title":"INPUTS"},{"location":"en-US/Save-FeatureFlag/#outputs","text":"","title":"OUTPUTS"},{"location":"en-US/Save-FeatureFlag/#notes","text":"","title":"NOTES"},{"location":"en-US/Save-FeatureFlag/#related-links","text":"","title":"RELATED LINKS"},{"location":"en-US/Save-PropertySet/","text":"Save-PropertySet SYNOPSIS Save a PropertySet to a file. SYNTAX Save-PropertySet [-PropertySet] <PropertySet> [[-FilePath] <String>] [-ProgressAction <ActionPreference>] [<CommonParameters>] DESCRIPTION Save a PropertySet to a specified file path in JSON format. This cmdlet allows you to persist the PropertySet for later use or sharing. EXAMPLES EXAMPLE 1 Save-PropertySet -PropertySet $myPropertySet -FilePath \"C:\\path\\to\\file.json\" Save the PropertySet to a JSON file at the specified path. PARAMETERS -PropertySet The PropertySet to save. Type: PropertySet Parameter Sets: (All) Aliases: Required: True Position: 1 Default value: None Accept pipeline input: True (ByValue) Accept wildcard characters: False -FilePath The file path to save the PropertySet to. Type: String Parameter Sets: (All) Aliases: Required: False Position: 2 Default value: None Accept pipeline input: False Accept wildcard characters: False -ProgressAction {{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Save-PropertySet"},{"location":"en-US/Save-PropertySet/#save-propertyset","text":"","title":"Save-PropertySet"},{"location":"en-US/Save-PropertySet/#synopsis","text":"Save a PropertySet to a file.","title":"SYNOPSIS"},{"location":"en-US/Save-PropertySet/#syntax","text":"Save-PropertySet [-PropertySet] <PropertySet> [[-FilePath] <String>] [-ProgressAction <ActionPreference>] [<CommonParameters>]","title":"SYNTAX"},{"location":"en-US/Save-PropertySet/#description","text":"Save a PropertySet to a specified file path in JSON format. This cmdlet allows you to persist the PropertySet for later use or sharing.","title":"DESCRIPTION"},{"location":"en-US/Save-PropertySet/#examples","text":"","title":"EXAMPLES"},{"location":"en-US/Save-PropertySet/#example-1","text":"Save-PropertySet -PropertySet $myPropertySet -FilePath \"C:\\path\\to\\file.json\" Save the PropertySet to a JSON file at the specified path.","title":"EXAMPLE 1"},{"location":"en-US/Save-PropertySet/#parameters","text":"","title":"PARAMETERS"},{"location":"en-US/Save-PropertySet/#-propertyset","text":"The PropertySet to save. Type: PropertySet Parameter Sets: (All) Aliases: Required: True Position: 1 Default value: None Accept pipeline input: True (ByValue) Accept wildcard characters: False","title":"-PropertySet"},{"location":"en-US/Save-PropertySet/#-filepath","text":"The file path to save the PropertySet to. Type: String Parameter Sets: (All) Aliases: Required: False Position: 2 Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-FilePath"},{"location":"en-US/Save-PropertySet/#-progressaction","text":"{{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-ProgressAction"},{"location":"en-US/Save-PropertySet/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"en-US/Save-PropertySet/#inputs","text":"","title":"INPUTS"},{"location":"en-US/Save-PropertySet/#outputs","text":"","title":"OUTPUTS"},{"location":"en-US/Save-PropertySet/#notes","text":"","title":"NOTES"},{"location":"en-US/Save-PropertySet/#related-links","text":"","title":"RELATED LINKS"},{"location":"en-US/Test-Condition/","text":"Test-Condition SYNOPSIS Evaluate whether a feature flag rule applies. SYNTAX Test-Condition [-Context] <Hashtable> [-Properties] <PropertySet> [-Condition] <Hashtable> [-ProgressAction <ActionPreference>] [<CommonParameters>] DESCRIPTION Takes the given context, properties, and rule/condition and evaluates whether the rule applies and what it's effect is. EXAMPLES EXAMPLE 1 $context = Get-DeviceContext $properties = Read-PropertySet $rule = $rules[0] Test-Condition -Context $context -Properties $properties -Condition $rule This would return a true/false PARAMETERS -Context The device context. Type: Hashtable Parameter Sets: (All) Aliases: Required: True Position: 1 Default value: None Accept pipeline input: False Accept wildcard characters: False -Properties The properties that matches given context. Type: PropertySet Parameter Sets: (All) Aliases: Required: True Position: 2 Default value: None Accept pipeline input: False Accept wildcard characters: False -Condition A condition to test which are part of rules. Type: Hashtable Parameter Sets: (All) Aliases: Required: True Position: 3 Default value: None Accept pipeline input: False Accept wildcard characters: False -ProgressAction {{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Test-Condition"},{"location":"en-US/Test-Condition/#test-condition","text":"","title":"Test-Condition"},{"location":"en-US/Test-Condition/#synopsis","text":"Evaluate whether a feature flag rule applies.","title":"SYNOPSIS"},{"location":"en-US/Test-Condition/#syntax","text":"Test-Condition [-Context] <Hashtable> [-Properties] <PropertySet> [-Condition] <Hashtable> [-ProgressAction <ActionPreference>] [<CommonParameters>]","title":"SYNTAX"},{"location":"en-US/Test-Condition/#description","text":"Takes the given context, properties, and rule/condition and evaluates whether the rule applies and what it's effect is.","title":"DESCRIPTION"},{"location":"en-US/Test-Condition/#examples","text":"","title":"EXAMPLES"},{"location":"en-US/Test-Condition/#example-1","text":"$context = Get-DeviceContext $properties = Read-PropertySet $rule = $rules[0] Test-Condition -Context $context -Properties $properties -Condition $rule This would return a true/false","title":"EXAMPLE 1"},{"location":"en-US/Test-Condition/#parameters","text":"","title":"PARAMETERS"},{"location":"en-US/Test-Condition/#-context","text":"The device context. Type: Hashtable Parameter Sets: (All) Aliases: Required: True Position: 1 Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-Context"},{"location":"en-US/Test-Condition/#-properties","text":"The properties that matches given context. Type: PropertySet Parameter Sets: (All) Aliases: Required: True Position: 2 Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-Properties"},{"location":"en-US/Test-Condition/#-condition","text":"A condition to test which are part of rules. Type: Hashtable Parameter Sets: (All) Aliases: Required: True Position: 3 Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-Condition"},{"location":"en-US/Test-Condition/#-progressaction","text":"{{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-ProgressAction"},{"location":"en-US/Test-Condition/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"en-US/Test-Condition/#inputs","text":"","title":"INPUTS"},{"location":"en-US/Test-Condition/#outputs","text":"","title":"OUTPUTS"},{"location":"en-US/Test-Condition/#notes","text":"","title":"NOTES"},{"location":"en-US/Test-Condition/#related-links","text":"","title":"RELATED LINKS"},{"location":"en-US/Test-FeatureFlag/","text":"Test-FeatureFlag SYNOPSIS Checks if the current machine's context will pass the feature flag rules. SYNTAX Test-FeatureFlag [-FeatureFlag] <FeatureFlag> [[-Properties] <PropertySet>] [-Context] <Hashtable> [-ProgressAction <ActionPreference>] [<CommonParameters>] DESCRIPTION Determines if a given context will pass the feature flag rules. Returns a `$True` or `$False` allowing you to gate keep your features. EXAMPLES EXAMPLE 1 $context = Get-DeviceContext Test-FeatureFlag -FeatureFlag '' -Context $context This will test if the current device will pass the feature flag rules. PARAMETERS -FeatureFlag The name of the feature flag to test. Type: FeatureFlag Parameter Sets: (All) Aliases: Required: True Position: 1 Default value: None Accept pipeline input: True (ByValue) Accept wildcard characters: False -Properties A hashtable of properties that define the different values in the context. Type: PropertySet Parameter Sets: (All) Aliases: Required: False Position: 2 Default value: None Accept pipeline input: False Accept wildcard characters: False -Context The context to use to test against. Type: Hashtable Parameter Sets: (All) Aliases: Required: True Position: 3 Default value: None Accept pipeline input: False Accept wildcard characters: False -ProgressAction {{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS OUTPUTS NOTES RELATED LINKS","title":"Test-FeatureFlag"},{"location":"en-US/Test-FeatureFlag/#test-featureflag","text":"","title":"Test-FeatureFlag"},{"location":"en-US/Test-FeatureFlag/#synopsis","text":"Checks if the current machine's context will pass the feature flag rules.","title":"SYNOPSIS"},{"location":"en-US/Test-FeatureFlag/#syntax","text":"Test-FeatureFlag [-FeatureFlag] <FeatureFlag> [[-Properties] <PropertySet>] [-Context] <Hashtable> [-ProgressAction <ActionPreference>] [<CommonParameters>]","title":"SYNTAX"},{"location":"en-US/Test-FeatureFlag/#description","text":"Determines if a given context will pass the feature flag rules. Returns a `$True` or `$False` allowing you to gate keep your features.","title":"DESCRIPTION"},{"location":"en-US/Test-FeatureFlag/#examples","text":"","title":"EXAMPLES"},{"location":"en-US/Test-FeatureFlag/#example-1","text":"$context = Get-DeviceContext Test-FeatureFlag -FeatureFlag '' -Context $context This will test if the current device will pass the feature flag rules.","title":"EXAMPLE 1"},{"location":"en-US/Test-FeatureFlag/#parameters","text":"","title":"PARAMETERS"},{"location":"en-US/Test-FeatureFlag/#-featureflag","text":"The name of the feature flag to test. Type: FeatureFlag Parameter Sets: (All) Aliases: Required: True Position: 1 Default value: None Accept pipeline input: True (ByValue) Accept wildcard characters: False","title":"-FeatureFlag"},{"location":"en-US/Test-FeatureFlag/#-properties","text":"A hashtable of properties that define the different values in the context. Type: PropertySet Parameter Sets: (All) Aliases: Required: False Position: 2 Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-Properties"},{"location":"en-US/Test-FeatureFlag/#-context","text":"The context to use to test against. Type: Hashtable Parameter Sets: (All) Aliases: Required: True Position: 3 Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-Context"},{"location":"en-US/Test-FeatureFlag/#-progressaction","text":"{{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-ProgressAction"},{"location":"en-US/Test-FeatureFlag/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"en-US/Test-FeatureFlag/#inputs","text":"","title":"INPUTS"},{"location":"en-US/Test-FeatureFlag/#outputs","text":"","title":"OUTPUTS"},{"location":"en-US/Test-FeatureFlag/#notes","text":"","title":"NOTES"},{"location":"en-US/Test-FeatureFlag/#related-links","text":"","title":"RELATED LINKS"},{"location":"en-US/about_Gatekeeper.help/","text":"Gatekeeper about_Gatekeeper SHORT DESCRIPTION Helps implement feature flags in your PowerShell projects. LONG DESCRIPTION Easily create and use feature flags written in JSON. Offers the ability to easily create new FeatureFlag files and leaves it up to you on how to distribute them. EXAMPLES See HeyItsGilbert/Gatekeeper#examples NOTE N\\A TROUBLESHOOTING NOTE Ensure the account running the scripts to check for the flags have permissions to the filepath you specify. Keep the curren running user context in mind. SEE ALSO FeatureFlags.io KEYWORDS PowerShell FeatureFlag Feature-Flags Feature-Flags-Management JSON JSON Schema","title":"Gatekeeper"},{"location":"en-US/about_Gatekeeper.help/#gatekeeper","text":"","title":"Gatekeeper"},{"location":"en-US/about_Gatekeeper.help/#about_gatekeeper","text":"","title":"about_Gatekeeper"},{"location":"en-US/about_Gatekeeper.help/#short-description","text":"Helps implement feature flags in your PowerShell projects.","title":"SHORT DESCRIPTION"},{"location":"en-US/about_Gatekeeper.help/#long-description","text":"Easily create and use feature flags written in JSON. Offers the ability to easily create new FeatureFlag files and leaves it up to you on how to distribute them.","title":"LONG DESCRIPTION"},{"location":"en-US/about_Gatekeeper.help/#examples","text":"See HeyItsGilbert/Gatekeeper#examples","title":"EXAMPLES"},{"location":"en-US/about_Gatekeeper.help/#note","text":"N\\A","title":"NOTE"},{"location":"en-US/about_Gatekeeper.help/#troubleshooting-note","text":"Ensure the account running the scripts to check for the flags have permissions to the filepath you specify. Keep the curren running user context in mind.","title":"TROUBLESHOOTING NOTE"},{"location":"en-US/about_Gatekeeper.help/#see-also","text":"FeatureFlags.io","title":"SEE ALSO"},{"location":"en-US/about_Gatekeeper.help/#keywords","text":"PowerShell FeatureFlag Feature-Flags Feature-Flags-Management JSON JSON Schema","title":"KEYWORDS"}]}